name: Process and Publish Benchmark Data

on:
  workflow_run:
    workflows: ["AWS Instance Benchmark Collection"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      force_processing:
        description: 'Force reprocessing of latest data'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: us-east-1
  BENCHMARK_BUCKET: aws-instance-benchmarks-data

jobs:
  process-data:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    permissions:
      id-token: write   # Required for AWS OIDC
      contents: write   # Required for pushing processed data
      pages: write      # Required for GitHub Pages deployment
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for data processing
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: DataProcessing
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download latest benchmark data
      run: |
        echo "Downloading latest benchmark data from S3..."
        
        # Sync all raw and processed data
        aws s3 sync s3://${{ env.BENCHMARK_BUCKET }}/raw/ data/raw/
        aws s3 sync s3://${{ env.BENCHMARK_BUCKET }}/processed/ data/processed/
        
        echo "Data download completed"
        ls -la data/
        
    - name: Build data processing tools
      run: |
        # Build the data aggregation tool if we have it
        if [ -f "cmd/data-processor/main.go" ]; then
          go build -o data-processor cmd/data-processor/main.go
        else
          echo "Creating simple data processor..."
          # Create a basic data processor for now
          cat > process-data.sh << 'EOF'
          #!/bin/bash
          echo "Processing benchmark data..."
          
          # Create processed directory structure
          mkdir -p data/processed/latest
          mkdir -p data/processed/historical/$(date +%Y/%m)
          
          # Simple aggregation (placeholder for now)
          echo "{
            \"metadata\": {
              \"generated\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
              \"version\": \"1.0\",
              \"description\": \"AWS Instance Performance Benchmarks\"
            },
            \"benchmarks\": {
              \"stream\": {
                \"description\": \"Memory bandwidth benchmarks\",
                \"last_updated\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
              }
            }
          }" > data/processed/latest/metadata.json
          
          echo "Data processing completed"
          EOF
          chmod +x process-data.sh
        fi
        
    - name: Process benchmark data
      run: |
        echo "Processing collected benchmark data..."
        
        if [ -f "./data-processor" ]; then
          ./data-processor --input data/raw --output data/processed/latest
        else
          ./process-data.sh
        fi
        
        # Create historical snapshot
        HISTORICAL_DIR="data/processed/historical/$(date +%Y/%m)"
        mkdir -p "$HISTORICAL_DIR"
        cp -r data/processed/latest/* "$HISTORICAL_DIR/" 2>/dev/null || echo "No latest data to archive"
        
    - name: Generate GitHub Pages site
      run: |
        echo "Generating GitHub Pages site..."
        
        mkdir -p docs/_site
        
        # Create index.html for GitHub Pages
        cat > docs/_site/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>AWS Instance Benchmarks</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; }
                .header { border-bottom: 1px solid #eee; padding-bottom: 20px; margin-bottom: 30px; }
                .benchmark-data { background: #f8f9fa; padding: 20px; border-radius: 6px; margin: 20px 0; }
                .api-endpoint { background: #e3f2fd; padding: 15px; border-radius: 4px; font-family: monospace; }
                .last-updated { color: #666; font-size: 14px; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>AWS Instance Benchmarks</h1>
                <p>Comprehensive performance benchmarks for AWS EC2 instances</p>
                <p class="last-updated">Last updated: <span id="lastUpdated"></span></p>
            </div>
            
            <h2>Data Access</h2>
            <div class="api-endpoint">
                <h3>JSON API Endpoints</h3>
                <p><strong>Latest benchmarks:</strong><br>
                <code>https://raw.githubusercontent.com/scttfrdmn/aws-instance-benchmarks/main/data/processed/latest/metadata.json</code></p>
                
                <p><strong>Memory benchmarks:</strong><br>
                <code>https://raw.githubusercontent.com/scttfrdmn/aws-instance-benchmarks/main/data/processed/latest/memory-benchmarks.json</code></p>
            </div>
            
            <h2>Integration Example</h2>
            <div class="benchmark-data">
                <h3>ComputeCompass Integration</h3>
                <pre><code>// Example TypeScript integration
        const response = await fetch('https://raw.githubusercontent.com/scttfrdmn/aws-instance-benchmarks/main/data/processed/latest/memory-benchmarks.json')
        const benchmarkData = await response.json()
        
        // Cache for 1 hour as specified
        const cacheControl = 'max-age=3600'</code></pre>
            </div>
            
            <h2>Benchmark Suites</h2>
            <ul>
                <li><strong>STREAM</strong> - Memory bandwidth and latency</li>
                <li><strong>HPL/LINPACK</strong> - Computational performance (GFLOPS)</li>
            </ul>
            
            <h2>Repository</h2>
            <p><a href="https://github.com/scttfrdmn/aws-instance-benchmarks">View on GitHub</a></p>
            
            <script>
                document.getElementById('lastUpdated').textContent = new Date().toISOString();
            </script>
        </body>
        </html>
        EOF
        
        # Copy processed data to site
        cp -r data/processed docs/_site/data
        
        echo "GitHub Pages site generated"
        
    - name: Upload processed data to S3
      run: |
        echo "Uploading processed data to S3..."
        
        # Upload processed data back to S3
        aws s3 sync data/processed/ s3://${{ env.BENCHMARK_BUCKET }}/processed/ \
          --cache-control "max-age=3600" \
          --metadata-directive REPLACE
          
        echo "Processed data uploaded to S3"
        
    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v2
      with:
        artifact_name: github-pages
        
    - name: Create deployment artifact
      run: |
        tar -czf github-pages.tar.gz -C docs/_site .
        
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs/_site
        
    - name: Commit processed data
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add processed data
        git add data/processed/
        git add docs/
        
        if git diff --staged --quiet; then
          echo "No new processed data to commit"
        else
          git commit -m "Automated data processing - $(date +%Y-%m-%d)

          - Processed latest benchmark results
          - Updated GitHub Pages site
          - Generated API endpoints for ComputeCompass integration
          
          ðŸ¤– Generated with GitHub Actions"
          
          git push
          echo "Processed data committed and pushed"
        fi
        
    - name: Create release for stable data
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.force_processing == 'true'
      run: |
        # Create a release tag for stable data versions
        TAG_NAME="data-$(date +%Y.%m.%d)"
        
        git tag -a "$TAG_NAME" -m "Benchmark data release $TAG_NAME

        - Comprehensive benchmark dataset
        - Ready for production integration
        - Stable API endpoints"
        
        git push origin "$TAG_NAME"
        
        echo "Created release tag: $TAG_NAME"